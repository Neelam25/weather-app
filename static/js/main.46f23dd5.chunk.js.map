{"version":3,"sources":["Component/Form.jsx","Component/Weather.jsx","App.js","serviceWorker.js","index.js","img/weather-app-icon.png"],"names":["Form","props","react_default","a","createElement","className","href","src","logo","alt","onSubmit","getWeather","type","name","placeholder","Weather","weatherDesc","city","country","id","imgsrc","description","temperature","weather_icons_react","size","color","error","api_key","App","state","undefined","humidity","icon","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","console","log","preventDefault","target","value","fetch","concat","sent","json","cod","_this","setState","sys","main","temp","weather","stop","this","Component_Form","Component_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.46f23dd5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport logo from \"../img/weather-app-icon.png\";\r\nconst Form = props => {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-color  justify-content-between\">\r\n        <a className=\"navbar-brand\" href=\"#123\">\r\n          <img src={logo} className=\"imgSize\" alt=\"\" />\r\n          <h5 className=\"brand-color\">WeatherFinder</h5>\r\n        </a>\r\n        <form className=\"form-inline\" onSubmit={props.getWeather}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"text\"\r\n            name=\"city\"\r\n            placeholder=\"City....\"\r\n          />\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            name=\"country\"\r\n            placeholder=\"Country....\"\r\n          />\r\n          <button className=\"btn btn-dark ml-sm-2\">GetWeather</button>\r\n        </form>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { WiThermometerExterior } from \"weather-icons-react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8 weather mx-auto\">\r\n          <div className=\"weather-head\">\r\n            <h1 className=\"text-center display-4\">\r\n              {props.weatherDesc.city && props.weatherDesc.country && (\r\n                <p>\r\n                  {props.weatherDesc.city},{props.weatherDesc.country}\r\n                </p>\r\n              )}\r\n            </h1>\r\n            <div className=\"row\">\r\n              <div id=\"description\" className=\"col-md-6\">\r\n                <i>\r\n                  <img className=\"tempImage\" src={props.imgsrc} alt=\"\" />\r\n                </i>\r\n\r\n                {props.weatherDesc.description && (\r\n                  <p className=\"desc\"> {props.weatherDesc.description}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div id=\"temperature\" className=\"col-lg-6\">\r\n                {props.weatherDesc.temperature && (\r\n                  <p id=\"temp\" className=\"d-inline\">\r\n                    {props.weatherDesc.temperature}\r\n                  </p>\r\n                )}\r\n\r\n                <WiThermometerExterior\r\n                  className=\"align-baseline\"\r\n                  size={90}\r\n                  color=\"#fff\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {props.weatherDesc.error && <p>Error: {props.weatherDesc.error}</p>}\r\n    </div>\r\n  );\r\n};\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Form from \"./Component/Form\";\nimport Weather from \"./Component/Weather\";\n\nconst api_key = \"738992a4c387d4f02fd726308f2d5f4c\";\n\nclass App extends Component {\n  state = {\n    city: undefined,\n    country: undefined,\n    temperature: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    console.log(e);\n    e.preventDefault();\n    var city = e.target.city.value;\n    var country = e.target.country.value;\n\n    if (city && country) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=imperial&appid=${api_key}`\n      );\n      const data = await api_call.json();\n\n      console.log(\"=\", data);\n      if (data.cod !== \"404\") {\n        this.setState({\n          city: data.name,\n          country: data.sys.country,\n          temperature: data.main.temp,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          icon: data.weather[0].icon,\n          error: undefined\n        });\n      }\n    } else {\n      this.setState({\n        city: undefined,\n        country: undefined,\n        temperature: undefined,\n        humidity: undefined,\n        description: undefined,\n        icon: undefined,\n        error: \"Enter the Details\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"Weather-App\">\n        <Form getWeather={this.getWeather} />\n        {this.state.city && (\n          <Weather\n            weatherDesc={this.state}\n            imgsrc={\n              \"http://openweathermap.org/img/w/\" + this.state.icon + \".png\"\n            }\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/weather-app-icon.9672f063.png\";"],"sourceRoot":""}